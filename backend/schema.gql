# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Article {
  category: String!
  content: String!
  createdAt: DateTime!
  id: ID!
  media: String!
  title: String!
  updatedAt: DateTime!
}

input ArticleInput {
  category: String!
  content: String!
  title: String!
}

type Bracket {
  createdAt: DateTime!
  entries: Float!
  id: ID!
  letter: String!
  maxPoints: Float!
  name: String!
  price: Float!
  prize1: String!
  prize2: String!
  prize3: String!
  remainingEntries: Float!
  start: String!
  updatedAt: DateTime!
}

input BracketInput {
  entries: Float!
  letter: String!
  maxPoints: Float!
  name: String!
  price: Float!
  prize1: String!
  prize2: String!
  prize3: String!
  start: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addMedia(file: Upload!): String!
  createArticle(file: Upload!, input: ArticleInput!): Article!
  createBracket(input: BracketInput!): Bracket!
  createPartner(file: Upload!, input: PartnerInput!): Partner!
  createTicket(input: TicketInput!): Ticket!
  createTicket2(input: TicketInput!): Ticket!
  createTickets(input: [TicketInput!]!): Ticket!
  createTrainer(file: Upload!, input: TrainerInput!): Trainer!
  deleteArticle(id: ID!): Article!
  deleteBracket(id: ID!): Bracket!
  deleteMedia(media: String!): Boolean!
  deletePartner(id: ID!): Partner!
  deleteTicket(id: ID!): Ticket!
  deleteTrainer(id: ID!): Trainer!
  deleteUser(id: ID!): User!
  register(input: UserInput!): Token!
  updateAllPlayers: [Player!]!
  updateAllPoules: [Poule!]!
  updateArticle(file: Upload, id: ID!, input: ArticleInput!): Article!
  updateBracket(id: ID!, input: BracketInput!): Bracket!
  updatePartner(file: Upload, id: ID!, input: PartnerInput!): Partner!
  updateTicket(id: ID!, input: TicketInput!): Ticket!
  updateTournament(id: ID!, input: TournamentInput!): Tournament!
  updateTrainer(file: Upload, id: ID!, input: TrainerInput!): Trainer!
  updateUser(id: ID!, input: UserInput!): User!
}

type Partner {
  createdAt: DateTime!
  id: ID!
  media: String!
  name: String!
  updatedAt: DateTime!
  url: String!
}

input PartnerInput {
  name: String!
  url: String!
}

type Player {
  aclglob: Float!
  apoint: Float!
  categ: String!
  clast: String!
  clglob: Float!
  clnat: Float!
  clpro: String!
  club: String!
  createdAt: DateTime!
  id: ID!
  licence: String!
  natio: String
  nclub: Float!
  nom: String!
  point: Float!
  prenom: String!
  rangdep: Float!
  rangreg: Float!
  updatedAt: DateTime!
  valcla: Float!
  valinit: Float!
}

type Poule {
  createdAt: DateTime!
  id: ID!
  libdivision: String!
  libepr: String!
  libequipe: String!
  liendivision: String!
  teams: [Team!]
  updatedAt: DateTime!
}

type Query {
  article(id: ID!): Article!
  articles: [Article!]!
  bracket(id: ID!): Bracket!
  brackets: [Bracket!]!
  checkAllTickets: [Ticket!]!
  login(input: LoginInput!): Token!
  medias: [String!]!
  newestArticles: [Article!]!
  partner(id: ID!): Partner!
  partners: [Partner!]!
  player(id: ID!): Player!
  players: [Player!]!
  poule(id: ID!): Poule!
  poules: [Poule!]!
  sendAllMails: [TicketWithBrackets!]!
  ticket(id: ID!): Ticket!
  tickets: [Ticket!]!
  tournament(id: ID!): Tournament!
  tournaments: [Tournament!]!
  trainer(id: ID!): Trainer!
  trainers: [Trainer!]!
  user(id: ID!): User!
  users: [User!]!
}

type Team {
  clt: String!
  createdAt: DateTime!
  def: Float!
  equipe: String!
  id: ID!
  joue: Float!
  nul: Float!
  numero: Float!
  pf: Float!
  pg: Float!
  pp: Float!
  pts: Float!
  updatedAt: DateTime!
  vic: Float!
}

type Ticket {
  bracket: String!
  createdAt: DateTime!
  email: String!
  firstname: String!
  hasPaid: Boolean!
  id: ID!
  lastname: String!
  licence: Float!
  phone: String!
  updatedAt: DateTime!
}

input TicketInput {
  bracket: String!
  email: String!
  firstname: String!
  hasPaid: Boolean!
  lastname: String!
  licence: Float!
  phone: String!
}

type TicketWithBrackets {
  brackets: [Bracket!]!
  email: String!
  firstname: String!
  lastname: String!
  licence: String!
}

type Token {
  token: String!
}

type Tournament {
  createdAt: DateTime!
  helloAssoForm: String!
  id: ID!
  isActive: Boolean!
  name: String!
  rulesFile: String!
  updatedAt: DateTime!
}

input TournamentInput {
  isActive: Boolean!
  name: String!
}

type Trainer {
  createdAt: DateTime!
  firstname: String!
  id: ID!
  lastname: String!
  media: String!
  qualification: String!
  updatedAt: DateTime!
}

input TrainerInput {
  firstname: String!
  lastname: String!
  qualification: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: String
  createdAt: DateTime!
  email: String!
  firstname: String!
  id: ID!
  lastname: String!
  updatedAt: DateTime!
}

input UserInput {
  avatar: String
  email: String!
  firstname: String!
  lastname: String!
  password: String!
}